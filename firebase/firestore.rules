rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== HELPER FUNCTIONS =====

    // Checks if the user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is a global administrator via custom token claim.
    function isGlobalAdmin() {
      return isSignedIn() && request.auth.token != null && request.auth.token.isAdmin == true;
    }

    // Checks if the authenticated user is a member of the specified group.
    // Checks the subcollection groups/{groupId}/members/{userId}
    function isGroupMember(groupId) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
    }

    // Retrieves the role of the authenticated user within the specified group from the subcollection.
    // Returns null if the user is not a member or the role is not set.
    function getGroupRole(groupId) {
      let memberPath = /databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid);
      return isSignedIn() && exists(memberPath) ? get(memberPath).data.role : null;
    }

    // Checks if the user has an 'admin' role within the specified group.
    function isGroupAdmin(groupId) {
      return getGroupRole(groupId) == "admin";
    }

    // Checks if the user has an 'organizer' or 'admin' role within the specified group.
    function isGroupOrganizer(groupId) {
      let role = getGroupRole(groupId);
      return role == "admin" || role == "organizer";
    }

    // Retrieves the groupId for a given gameId by reading the game document.
    // This function involves an extra read. Use with caution, especially in list rules.
    function getGameGroupId(gameId) {
      let gamePath = /databases/$(database)/documents/games/$(gameId);
      // Ensure the path exists before trying to get it, to avoid errors if game doc doesn't exist
      return exists(gamePath) ? get(gamePath).data.groupId : null;
    }

    // Helper to extract groupId from a composite membershipId (e.g., "groupId_userId").
    function getMembershipGroupId(membershipId) {
      return membershipId.split("_")[0];
    }

    // Helper to extract gameId from a composite participantId (e.g., "gameId_userId").
    function getParticipantGameId(participantId) {
      return participantId.split("_")[0];
    }

    // ===== COLLECTION RULES =====

    // User profiles
    match /users/{userId} {
      allow read, write: if isSignedIn() && (request.auth.uid == userId || isGlobalAdmin());

      // Stripe checkout sessions
      match /checkout_sessions/{id} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }
      // Add rules for other user sub-collections if any (e.g., subscriptions)
    }

    // Groups
    match /groups/{groupId} {
      // Get single group:
      // 1. Public groups by any signed-in user.
      // 2. Private groups if the user is a member.
      // 3. Any group if the user is a global admin.
      // 4. Allow server-side access (request.auth == null), assuming API route handles auth/authz.
      allow get: if (resource.data.isPublic == true && isSignedIn()) || isGroupMember(groupId) || isGlobalAdmin() || request.auth == null;

      // List groups:
      // - Allow listing if the query is specifically for public groups (client filters isPublic == true).
      // - Global admins can list all groups.
      // - For "my groups", client should list their groupMembers first, then get each group individually.
      // Client must filter for public groups or user's groups (via groupMembers collection). Get rules protect individual docs.
      allow list: if isSignedIn() || isGlobalAdmin();

      allow create: if isSignedIn(); // Any signed-in user can create a group. Creator becomes admin via client logic.
      allow update: if isGroupAdmin(groupId) || isGlobalAdmin(); // Only group admin or global admin can update.
      allow delete: if isGroupAdmin(groupId) || isGlobalAdmin(); // Only group admin or global admin can delete.

      // Rules for the 'members' subcollection within each group
      match /members/{memberUserId} {
        // Allow creating a member document if:
        // 1. The user is signed in.
        // 2. The ID of the member document being created (memberUserId) is the authenticated user's ID.
        // 3. The 'userId' field within the document data is also the authenticated user's ID.
        // 4. The 'role' field being set is 'admin'.
        // This specifically covers the scenario where the group creator adds themselves as the initial admin.
        allow create: if isSignedIn() &&
                         request.auth.uid == memberUserId &&
                         request.resource.data.userId == request.auth.uid &&
                         request.resource.data.role == 'admin';

        // Allow reading member documents if the user is signed in AND
        // (is a member of the parent group OR is a global admin).
        // This allows members to see other members of the same group.
        allow read: if isSignedIn() && (isGroupMember(groupId) || isGlobalAdmin());

        // Allow listing member documents if the user is signed in AND
        // (is a member of the parent group OR is a global admin).
        allow list: if isSignedIn() && (isGroupMember(groupId) || isGlobalAdmin());

        // TODO: Define comprehensive update, delete rules for members.
        // Example update: Allow if user is admin of parent group, or member updating their own specific fields.
        // allow update: if isSignedIn() && isGroupAdmin(groupId);
        // Example delete: Allow if user is admin of parent group, or member removing themselves.
        // allow delete: if isSignedIn() && (isGroupAdmin(groupId) || request.auth.uid == memberUserId);
      }
    }

    // Group memberships (defines user roles within groups) - THIS BLOCK MAY BE REDUNDANT OR MISALIGNED
    // if the primary model is groups/{groupId}/members/{memberUserId}
    match /groupMembers/{membershipId} {
      function docGroupId() { return getMembershipGroupId(membershipId); }
      function docUserId() { return membershipId.split("_")[1]; }

      // Get single membership document:
      // Allow if it's an SDK call (request.method != null, implies server/client SDK)
      // or if user is a global admin. This mirrors the permissive nature of 'allow list'
      // for server-side scenarios, trusting server-side auth.
      allow get: if request.method != null || isGlobalAdmin();

      // List memberships:
      // - User can list their own memberships (client filters by userId == auth.uid).
      // - Group admin can list members of their specific group (client filters by groupId).
      // - Global admin can list all.
      // Client must filter by userId for own memberships, or by groupId for group's members (if admin). Get rules protect individual docs.
      // For server-side client SDK calls from API routes (where request.auth might be null),
      // we rely on the API route having verified the user and the query in groupService.ts
      // using a where('userId', '==', verifiedUserId) clause.
      // This rule is more permissive for list to accommodate that server-side pattern.
      allow list: if request.method != null || isGlobalAdmin(); // Allows any authenticated-like list if method exists, or if global admin.

      allow create: if isSignedIn() && (
                       // Case 1: Creator adding themselves as admin for a new group.
                       // The user part of the document ID must match the authenticated user,
                       // and the role being written must be 'admin'.
                       (docUserId() == request.auth.uid && request.resource.data.role == 'admin') ||
                       // Case 2: User joining an existing group (as a regular member).
                       // The user part of the document ID must match the authenticated user,
                       // and the role being written must be 'member'.
                       // (Further checks like group being public or user being invited would be ideal here for non-admin joins)
                       (docUserId() == request.auth.uid && request.resource.data.role == 'member') ||
                       // Case 3: Existing group admin adding any member to the group.
                       // Checks if the authenticated user is an admin of the group specified by the doc path.
                       isGroupAdmin(docGroupId()) ||
                       // Case 4: Global admin.
                       isGlobalAdmin()
      );
      allow update: if isGroupAdmin(docGroupId()) || isGlobalAdmin(); // Typically for role changes by admin.
      allow delete: if (isSignedIn() && request.auth.uid == docUserId()) || isGroupAdmin(docGroupId()) || isGlobalAdmin(); // User removing self, or admin removing member.
    }

    // Games
    match /games/{gameId} {
    // Helper to get the game's group ID from the resource (current doc)
    function gameGroupId() {
      // Check if resource and resource.data exist before accessing groupId
      return resource != null && resource.data != null ? resource.data.groupId : null;
    }

      // Helper to get the game's group ID from the incoming request data (for create)
      function requestGameGroupId() {
        return request.resource.data.groupId;
      }

      // READ (get single game)
      // User must be a member of the game's group OR a global admin,
      // OR it's a trusted server call (request.auth == null, implies server has done auth checks).
      // Ensure gameGroupId() is not null.
      allow get: if gameGroupId() != null &&
                    (isGroupMember(gameGroupId()) || isGlobalAdmin() || request.auth == null);

      // LIST games
      // To list games, the query *must* be filtered by a specific groupId AND user is member,
      // OR user is a global admin,
      // OR it's a trusted server call (request.auth == null, implies server has done auth checks).
      // This rule assumes the client is doing: db.collection('games').where('groupId', '==', someGroupId)
      allow list: if (
                      (request.query.limit != null && request.query.limit <= 30 && // Basic query sanity
                       request.query.filters.size() > 0 && // Ensure there's at least one where clause
                       request.query.filters[0].fieldPath == "groupId" && // First filter MUST be on groupId
                       request.query.filters[0].op == "==" &&
                       isGroupMember(request.query.filters[0].value) // User must be member of the queried groupId
                      ) || isGlobalAdmin()
                    ) || request.auth == null;


      // CREATE game
      // User must be an organizer of the target group OR a global admin.
      allow create: if requestGameGroupId() != null &&
                       (isGroupOrganizer(requestGameGroupId()) || isGlobalAdmin());

      // UPDATE game
      // User must be an organizer of the game's current group OR a global admin.
      allow update: if gameGroupId() != null &&
                       (isGroupOrganizer(gameGroupId()) || isGlobalAdmin());

      // DELETE game
      // User must be an organizer of the game's current group OR a global admin.
      allow delete: if gameGroupId() != null &&
                       (isGroupOrganizer(gameGroupId()) || isGlobalAdmin());
    }

    // Game participants
    match /gameParticipants/{participantId} {
      function docGameId() { return getParticipantGameId(participantId); }
      function docUserId() { return participantId.split("_")[1]; }
      // resolvedGameGroupId() is okay for single doc ops, but avoid in 'allow list' if it causes issues.
      function resolvedGameGroupId() { return getGameGroupId(docGameId()); }

      // Get single participant: If user is member of game's group, or is the participant, or global admin.
      allow get: if resolvedGameGroupId() != null && (isGroupMember(resolvedGameGroupId()) || (isSignedIn() && request.auth.uid == docUserId()) || isGlobalAdmin());

      // List participants for a specific game: If user is member of that game's group, or global admin.
      // Client must query by gameId. Get rules protect individual docs and verify membership to game's group.
      allow list: if isSignedIn() || isGlobalAdmin();

      allow create: if isSignedIn() && resolvedGameGroupId() != null &&
                       // User self-registering, must be member of game's group
                       (request.resource.data.userId == request.auth.uid && request.auth.uid == docUserId() && isGroupMember(resolvedGameGroupId())) ||
                       // Organizer/Admin of game's group adding participant
                       isGroupOrganizer(resolvedGameGroupId()) ||
                       isGlobalAdmin();
      allow update, delete: if isSignedIn() && resolvedGameGroupId() != null &&
                               // Participant managing their own registration
                               (request.auth.uid == docUserId() && resource.data.userId == request.auth.uid) ||
                               // Organizer/Admin of game's group managing participants
                               isGroupOrganizer(resolvedGameGroupId()) ||
                               isGlobalAdmin();
    }

    // Recurring series for games
    match /recurringSeries/{seriesId} {
      allow get: if resource.data.groupId != null && (isGroupMember(resource.data.groupId) || isGlobalAdmin());
      // Client must filter by groupId. Get rules protect individual docs and verify membership.
      allow list: if isSignedIn() || isGlobalAdmin();
      allow create: if request.resource.data.groupId != null && (isGroupOrganizer(request.resource.data.groupId) || isGlobalAdmin());
      allow update, delete: if resource.data.groupId != null && (isGroupOrganizer(resource.data.groupId) || isGlobalAdmin());
    }

    // Teams (assuming part of a game, so access tied to game's group)
    // Document ID for teams could be {gameId}_{teamNameOrId} or teams/{teamUniqueId} with a gameId field.
    // Assuming teams/{teamId} with a gameId field for this example.
    match /teams/{teamId} {
      function teamGameId() { return resource.data.gameId; } // For existing doc
      function teamGameIdOnCreate() { return request.resource.data.gameId; } // For new doc
      function resolvedTeamGameGroupId() { return getGameGroupId(teamGameId()); }
      function resolvedTeamGameGroupIdOnCreate() { return getGameGroupId(teamGameIdOnCreate()); }

      allow get: if teamGameId() != null && resolvedTeamGameGroupId() != null && (isGroupMember(resolvedTeamGameGroupId()) || isGlobalAdmin());
      // Client must filter by gameId. Get rules protect individual docs and verify membership to game's group.
      allow list: if isSignedIn() || isGlobalAdmin();
      allow create: if teamGameIdOnCreate() != null && resolvedTeamGameGroupIdOnCreate() != null && (isGroupOrganizer(resolvedTeamGameGroupIdOnCreate()) || isGlobalAdmin());
      allow update, delete: if teamGameId() != null && resolvedTeamGameGroupId() != null && (isGroupOrganizer(resolvedTeamGameGroupId()) || isGlobalAdmin());
    }


    // Game Messages (sub-collection of games)
    match /gameMessages/{gameId}/messages/{messageId} {
      // gameId here is the parent document ID from the path.
      function chatGameGroupId() { return getGameGroupId(gameId); }

      allow get: if chatGameGroupId() != null && (isGroupMember(chatGameGroupId()) || isGlobalAdmin());
      // List messages for a specific game if user is member of game's group.
      allow list: if chatGameGroupId() != null && (isGroupMember(chatGameGroupId()) || isGlobalAdmin());

      allow create: if chatGameGroupId() != null && isGroupMember(chatGameGroupId()) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if chatGameGroupId() != null &&
                               ( (isSignedIn() && request.auth.uid == resource.data.userId) || isGroupOrganizer(chatGameGroupId()) || isGlobalAdmin() );
    }

    // Group Chats (sub-collection of groups) - Renamed from gameChats for clarity if it's group-level
    match /groupMessages/{groupId}/messages/{messageId} { // Assuming this path for group-level chat
      // groupId here is the parent document ID from the path.
      allow get: if isGroupMember(groupId) || isGlobalAdmin();
      allow list: if isGroupMember(groupId) || isGlobalAdmin(); // List messages for a specific group if user is member.

      allow create: if isGroupMember(groupId) && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isGroupMember(groupId) &&
                               ( (isSignedIn() && request.auth.uid == resource.data.userId) || isGroupOrganizer(groupId) || isGlobalAdmin() );
    }

    // Notifications
    match /notifications/{notificationId} {
      allow get: if isSignedIn() && (request.auth.uid == resource.data.userId || isGlobalAdmin());
      // List user's own notifications. Client must filter by userId.
      allow list: if isSignedIn() || isGlobalAdmin();
      // Create might be server-side or by specific actions; allow if user is creating for themselves.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && (request.auth.uid == resource.data.userId || isGlobalAdmin());
    }
  }
}
